<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo+Github 设置背景图片和背景透明度</title>
    <url>/2021/06/04/Hexo-Github-%E8%AE%BE%E7%BD%AE%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87%E5%92%8C%E8%83%8C%E6%99%AF%E9%80%8F%E6%98%8E%E5%BA%A6/</url>
    <content><![CDATA[<h2 id="设置背景图"><a href="#设置背景图" class="headerlink" title="设置背景图"></a>设置背景图</h2><ol>
<li>首先先在站点目录下的 source 里新建一个 _data 文件夹，然后再新建一个文件夹为 <strong>styles.styl</strong> 。样式代码，可以为这样<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">  background-image: url(/images/bg.jpg);  // 在 source 目录下新建一个images 文件夹，里面放图片或者头像图片也可以。这样推上 github 之后就不会出现不见的情况了。</span><br><span class="line">  background-repeat: no-repeat;</span><br><span class="line">  background-attachment:fixed;</span><br><span class="line">  background-position:50% 50%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>进入主题文件中的配置文件 _config.yml ，搜索关键字 Define custom file paths，将 <strong>style: source/_data/styles.styl</strong> 的注释打开。</li>
<li>运行本地起本地的站点，查看效果<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure></li>
<li>结果正常的话，接下来接可以配置顺路一起配置背景颜色了！！！<h2 id="设置背景图透明度"><a href="#设置背景图透明度" class="headerlink" title="设置背景图透明度"></a>设置背景图透明度</h2></li>
<li>直接在在 styles.styl 文件中写上代码。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.main-inner&#123;</span><br><span class="line">  opacity: 0.95;</span><br><span class="line">&#125;</span><br><span class="line">.header-inner&#123;</span><br><span class="line">  opacity: 0.75;</span><br><span class="line">  z-index: 10;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
其中 main-inner 是主体内容区域的类名, header-inner是菜单栏的类名，可以通过来增加样式来进行修改样式。</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>如何将博客部署到Github上</title>
    <url>/2021/06/05/%E5%A6%82%E4%BD%95%E5%B0%86%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0Github%E4%B8%8A/</url>
    <content><![CDATA[<ol>
<li>首先需要安装 node、npm</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>React的学习</title>
    <url>/2021/06/06/React%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><ol>
<li>首先电脑得配置环境，先安装 node.js、<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node -v   // 在命令窗口中查看版本是否安装成功</span><br><span class="line">npm -v    // 查看版本号</span><br></pre></td></tr></table></figure></li>
<li>然后是安装 React 的脚手架，等待安装完成<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i -g create-react-app  // i是install的简写</span><br></pre></td></tr></table></figure></li>
<li>，在你想要创建项目的文件夹下进入命令窗口，然后创建 React 项目<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create-react-app project  // 1. project 是你的项目名字</span><br><span class="line">npm start                 // 2. 启动项目</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>nodejs学习</title>
    <url>/2021/06/16/%E2%80%9Cnodejs%E5%AD%A6%E4%B9%A0%E2%80%9D/</url>
    <content><![CDATA[<h1 id="nodejs-核心模块-http-的学习"><a href="#nodejs-核心模块-http-的学习" class="headerlink" title="nodejs 核心模块 http 的学习"></a>nodejs 核心模块 http 的学习</h1><ol>
<li><p>首先是在新建的文件中新建一个app.js 文件，(名字自己起)；然后引入 一个 http 模块。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const http = require(&#x27;http&#x27;);</span><br></pre></td></tr></table></figure></li>
<li><p>创建一个 web 服务器，提供网页服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  const server = http.createServer((request,response)=&gt;&#123;</span><br><span class="line">    console.log(request.url)        // 获取的请求的 url 地址</span><br><span class="line">    console.log(request.method);    // 获取请求的方式</span><br><span class="line">    if (request.url == &#x27;/member&#x27;) &#123;</span><br><span class="line">      response.write(&#x27;huiyuan&#x27;);  </span><br><span class="line">    &#125;else if (request.url == &#x27;/login&#x27;) &#123;</span><br><span class="line">      response.write(&#x27;success login&#x27;);</span><br><span class="line">    &#125;else &#123;</span><br><span class="line">      response.write(&#x27;404 not found&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">    // response.write(&#x27;nihao&#x27;);        // 代表是服务器传给浏览器的相应，其中 write 可以给浏览器的相应，write 可以调用多次</span><br><span class="line"></span><br><span class="line">    response.end();                 // 结束，无论地址栏输入任何的 url，相应的内容都是一样的。</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
<li><p>定义端口号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const port = 8080;</span><br></pre></td></tr></table></figure></li>
<li><p>服务器监听的 端口号<br>server.listen(port,()=&gt;{<br>‘port is running at’ + port<br>})</p>
</li>
</ol>
]]></content>
  </entry>
</search>
